from aiogram import Router, F
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from database.db import Database
import config
from handlers import get_main_menu
import sqlite3
router = Router()


class AdminStates(StatesGroup):
    WAITING_FOR_SERVER_NAME = State()
    WAITING_FOR_CHANNEL_ID = State()
    WAITING_FOR_MODERATION_GROUP = State()
# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
class AdminStatesTwo(StatesGroup):
    WAITING_FOR_ADMIN_ID = State()  # –û–∂–∏–¥–∞–µ–º ID –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞

# –ö–Ω–æ–ø–∫–∏ –¥–ª—è –∞–¥–º–∏–Ω–∫–∏
admin_menu = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")],
        [KeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –ì—Ä—É–ø–ø—É")],
        [KeyboardButton(text="üìã –°–ø–∏—Å–æ–∫ –ì—Ä—É–ø–ø")],
        [KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")]
    ],
    resize_keyboard=True,
    one_time_keyboard=False
)

# –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥
back_button = ReplyKeyboardMarkup(
    keyboard=[[KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")]],
    resize_keyboard=True,
    one_time_keyboard=True
)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "üõ† –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å"
@router.message(F.text == "üõ† –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å")
async def admin_panel(message: Message):
    if not Database.is_admin(message.from_user.id) and message.from_user.id not in config.ADMIN_IDS:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏")
        return

    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=admin_menu)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥" –¥–ª—è –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
@router.message(F.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
async def back_to_main_menu(message: Message):
    await message.answer("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=get_main_menu(message.from_user.id))



@router.message(lambda msg: msg.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –ì—Ä—É–ø–ø—É")
async def add_server_start(message: Message, state: FSMContext):
    if not Database.is_admin(message.from_user.id) and message.from_user.id not in config.ADMIN_IDS:
        return

    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞:", reply_markup=back_button)
    await state.set_state(AdminStates.WAITING_FOR_SERVER_NAME)


@router.message(lambda msg: msg.text == "üìã –°–ø–∏—Å–æ–∫ –ì—Ä—É–ø–ø")
async def list_servers(message: Message):
    if not Database.is_admin(message.from_user.id) and message.from_user.id not in config.ADMIN_IDS:
        return

    db = Database()
    servers = db.get_servers()
    db.close()

    if not servers:
        await message.answer("–°–µ—Ä–≤–µ—Ä–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç")
        return

    response = "–°–ø–∏—Å–æ–∫ —Å–µ—Ä–≤–µ—Ä–æ–≤:\n\n"
    for server_id, name in servers:
        response += f"{server_id}. {name}\n"

    await message.answer(response)


@router.message(AdminStates.WAITING_FOR_SERVER_NAME)
async def process_server_name(message: Message, state: FSMContext):
    if message.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        await state.clear()
        await message.answer("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", reply_markup=admin_menu)
        return

    await state.update_data(server_name=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ ID –∫–∞–Ω–∞–ª–∞ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏–π:", reply_markup=back_button)
    await state.set_state(AdminStates.WAITING_FOR_CHANNEL_ID)


@router.message(AdminStates.WAITING_FOR_CHANNEL_ID)
async def process_channel_id(message: Message, state: FSMContext):
    if message.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        await state.clear()
        await message.answer("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", reply_markup=admin_menu)
        return

    await state.update_data(channel_id=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ ID –≥—Ä—É–ø–ø—ã –º–æ–¥–µ—Ä–∞—Ü–∏–∏:", reply_markup=back_button)
    await state.set_state(AdminStates.WAITING_FOR_MODERATION_GROUP)


@router.message(AdminStates.WAITING_FOR_MODERATION_GROUP)
async def process_moderation_group(message: Message, state: FSMContext):
    if message.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        await state.clear()
        await message.answer("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", reply_markup=admin_menu)
        return

    data = await state.get_data()
    db = Database()
    try:
        db.add_server(
            name=data['server_name'],
            channel_id=data['channel_id'],
            moderation_group_id=message.text
        )
        await message.answer("–°–µ—Ä–≤–µ—Ä —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!", reply_markup=admin_menu)
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å–µ—Ä–≤–µ—Ä–∞: {str(e)}", reply_markup=admin_menu)
    finally:
        db.close()
        await state.clear()


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"
@router.message(F.text == "–î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
async def add_admin(message: Message, state: FSMContext):
    if not Database.is_admin(message.from_user.id) and message.from_user.id not in config.ADMIN_IDS:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.")
        return

    await message.answer("–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã:")
    await state.set_state(AdminStatesTwo.WAITING_FOR_ADMIN_ID)

@router.message(AdminStatesTwo.WAITING_FOR_ADMIN_ID)
async def process_admin_id(message: Message, state: FSMContext):
    user_id = message.text

    # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ ID ‚Äî —á–∏—Å–ª–æ
    if not user_id.isdigit():
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        return

    user_id = int(user_id)

    # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    conn = sqlite3.connect("bot.db")
    cursor = conn.cursor()

    # –ü—Ä–æ–≤–µ—Ä–∫–∞, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    cursor.execute("SELECT * FROM users WHERE id = ?", (user_id,))
    user = cursor.fetchone()

    if not user:
        await message.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
        conn.close()
        await state.clear()
        return

    # –û–±–Ω–æ–≤–ª—è–µ–º —Ä–æ–ª—å
    cursor.execute("UPDATE users SET role = 'admin' WHERE id = ?", (user_id,))
    conn.commit()
    conn.close()

    await message.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id} —Ç–µ–ø–µ—Ä—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä.")

    await state.clear()

    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=admin_menu)